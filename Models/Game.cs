//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GamerShop_v1._0.Models
{
    using System;
    using System.Collections.Generic;
    using System.IO;

    public partial class Game
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Game()
        {
            this.Keys = new HashSet<Key>();
        }
    
        public int IdGame { get; set; }
        public string GamePhoto { get; set; }
        public string GameTitle { get; set; }
        public Nullable<byte> IdGenre { get; set; }
        public string GameDescription { get; set; }
        public Nullable<byte> IdDeveloper { get; set; }
        public Nullable<byte> IdPublisher { get; set; }
        public Nullable<System.DateTime> GameReleaseDate { get; set; }
        public string GamePrice { get; set; }
        public Nullable<byte> GameEvaluation { get; set; }
    
        public virtual Developer Developer { get; set; }
        public virtual Genre Genre { get; set; }
        public virtual Publisher Publisher { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Key> Keys { get; set; }

        public string GetPhoto
        {
            get
            {
                if (GamePhoto is null)
                    return null;
                return Directory.GetCurrentDirectory() + @"\Images\" + GamePhoto.Trim();
            }
        }

        public string GetDeveloper
        {
            get
            {
                if (IdDeveloper == null)
                    return "UNKNOWN";
                else
                {
                    if (IdDeveloper == Developer.IdDeveloper)
                        return Convert.ToString(Developer.NameDevCorp);
                    else
                        return "";
                }
            }
        }

        public string GetPublisher
        {
            get
            {
                if (IdPublisher == null)
                    return "UNKNOWN";
                else
                {
                    if (IdPublisher == Publisher.IdPublisher)
                        return Convert.ToString(Publisher.NamePubCorp);
                    else
                        return "";
                }
            }
        }


    }
}
